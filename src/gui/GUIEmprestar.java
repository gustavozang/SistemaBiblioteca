/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import dao.DAOEmprestimo;
import dao.UsuarioDAO;
import modelo.UsuarioVO;
import dao.DAOLivro;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.temporal.ChronoUnit;
import modelo.Emprestimo;
import modelo.Livro;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Vitor
 */
public class GUIEmprestar extends javax.swing.JFrame {

    /**
     * Creates new form Emprestar
     */
    public GUIEmprestar() throws SQLException {
        initComponents();
        // Mostra a data atual como data do empréstimo        
        dataEmprestimo();
        // Mostra a data atual como data do empréstimo        
        mostraDataDevolucao();
        DAOLivro dadosLivro = new DAOLivro();
        ArrayList<Livro> listaLivros = new ArrayList();
        listaLivros = dadosLivro.selecionarTodosRegistros();
        //criando um modelo para a JTable
        DefaultTableModel modelo = (DefaultTableModel) tabelaDados.getModel();
        for(Livro livro : listaLivros)
        {
            Object[] dados = {livro.getNome(), livro.getEditora(), livro.getEdicao(), 
                  livro.getAutor(), livro.getCategoria(), livro.getQuantidade(), livro.getCodigo()};
            modelo.addRow(dados);
        }
    }
    
    public boolean verificaCpf() throws SQLException
    {
        DAOEmprestimo dadosEmprestimo = new DAOEmprestimo();
        ArrayList<Emprestimo> listaEmprestimos = new ArrayList();
        listaEmprestimos = dadosEmprestimo.selecionarTodosRegistros();
        for(Emprestimo emprestimo : listaEmprestimos)
        {
            if(emprestimo.getCpf().equals(campocpf.getText()))
            {
                return true;
            }
        }
        return false;
        }
   
     public boolean verificaCpfcadastrado() throws SQLException
    {
        UsuarioDAO dadosEmprestimo = new UsuarioDAO();
        ArrayList<UsuarioVO> listaEmprestimos = new ArrayList();
        listaEmprestimos = dadosEmprestimo.selecionarTodosRegistrosCPF();
        for(UsuarioVO emprestimo : listaEmprestimos)
        {
            if(emprestimo.getCpf().equals(campocpf.getText()))
            {
                return true;
            }
        }
        return false;
        }

    public boolean Valida()
    {
        if(tabelaDados.getSelectedRow()!=-1)
        {
            return true;
        }
        return false;
    }
    
    public boolean Validacao() throws SQLException
    {
        if(campocpf.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Preencha o campo de CPF.", "Erro", 0);
            return false;
        }
        
                
        else if(campocpf.getText().length()!=14)
        {
            JOptionPane.showMessageDialog(null, "Preencha o campo de CPF corretamente.", "Erro", 0);
            return false;
        }
        
                
        else if(verificaCpf())
        {
            JOptionPane.showMessageDialog(null, "Devolva o livro antes de pegar outro emprestado.", "Erro", 0);
            return false;
        }
        return true;
        
        
        
       
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    
    public void Decresce()
    {
        int linha=tabelaDados.getSelectedRow();
        Livro livro = new Livro();
        livro.setNome(""+tabelaDados.getValueAt(linha, 0));
        livro.setEditora(""+tabelaDados.getValueAt(linha, 1));
        livro.setEdicao(""+tabelaDados.getValueAt(linha, 2));
        livro.setAutor(""+tabelaDados.getValueAt(linha, 3));
        livro.setCategoria(""+tabelaDados.getValueAt(linha, 4));
        livro.setQuantidade(Integer.parseInt(""+tabelaDados.getValueAt(linha, 5))-1);
        livro.setCodigo(Integer.parseInt(""+tabelaDados.getValueAt(linha, 6)));
        
        DAOLivro atualizar = new DAOLivro();
        try {
            if(atualizar.alteraLivro(livro))
            {
                dispose();
                new GUIEmprestar().setVisible(true);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Erro ao Atualizar registro");
                dispose();
                new GUIManutencaoLivro().setVisible(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(GUIEmprestar.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
        /* ----DATAS-> */
    
    // Exibe a data do empréstimo(data atual) no formulário
    private void dataEmprestimo() {
        Date data = new Date();  
        
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");  
        String s = formataData.format( data ); 
        
        jT3DataEmprestimo.setText(formataData.format(data));      
    }   
    // Retorna a data de empréstimo
    private String salvaDataEmprestimo() {
        Date data = new Date();  
        
        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");  
        String dataEmprestimoFormatada = formataData.format(data); 
        
        return dataEmprestimoFormatada;   
    }  
    
    // Exibe a data de devolução no formulário
    private void mostraDataDevolucao() {        
        // Recebe a data do sistema
        Date dataDevolucao = new Date();
        // Adiciona + 10 à data atual
        dataDevolucao.setDate(dataDevolucao.getDate() + 7);
        
        // Formata a data recebida
        SimpleDateFormat formataData = new SimpleDateFormat("dd/MM/yyyy");        
        String dataDevolucaoFormatada = formataData.format(dataDevolucao);
                
        jT4DataDevolucao.setText(dataDevolucaoFormatada);
    }    
    // Retorna a data de devolução, pronta p/ ser salva no BD
    public String salvaDataDevolucao() {
        // Recebe a data do sistema
        Date dataDevolucao = new Date();
        // Adiciona + 10 à data atual
        dataDevolucao.setDate(dataDevolucao.getDate() + 7);
        
        // Formata a data recebida
        SimpleDateFormat formataData = new SimpleDateFormat("yyyy-MM-dd");        
        String dataDevolucaoFormatada = formataData.format(dataDevolucao);
        
        return dataDevolucaoFormatada;
    }
    
    // Pega a data de devolução no registro selecionado na tebela de emprestimo
    public String pegaDataDevolucaoTabela() throws ParseException {
        
        int linhaSelecionada = tabelaDados.getSelectedRow();   
        String dataTabela = (tabelaDados.getValueAt(linhaSelecionada, 4)).toString();
        
        SimpleDateFormat formataData = new SimpleDateFormat ("yyyy-MM-dd"); 
        Date dataDevolucao = new Date();
        
        dataDevolucao = formataData.parse(dataTabela); 
        
        return formataData.format(dataDevolucao);
    }
    
    // Calcula a diferença entre a data prevista para devolução e a data atual
    private long diferencaData() throws ParseException {
        LocalDate atual = LocalDate.now();
        LocalDate dataDevolucao = LocalDate.parse(pegaDataDevolucaoTabela());
        
        long diferenca = 0;
        
        if (dataDevolucao.compareTo(atual) < 0) {
            diferenca = ChronoUnit.DAYS.between(dataDevolucao, atual);
        }
        
        return diferenca;       
    }
    
    /* <-DATAS---- */ 
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaDados = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jConfirmaemprestimo = new javax.swing.JButton();
        campocpf = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jT3DataEmprestimo = new javax.swing.JTextField();
        jT4DataDevolucao = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Emprestar");
        setResizable(false);

        jPanel1.setBackground(java.awt.Color.white);

        tabelaDados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Editora", "Edição", "Autor", "Categoria", "Quantidade", "Codigo"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelaDados);

        jLabel1.setText("CPF :");

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/back.png"))); // NOI18N
        jButton1.setText("Voltar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jConfirmaemprestimo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jConfirmaemprestimo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/utils/accept.png"))); // NOI18N
        jConfirmaemprestimo.setText("Confirma");
        jConfirmaemprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConfirmaemprestimoActionPerformed(evt);
            }
        });

        try {
            campocpf.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecionar o livro, após informar o cpf confirmando o empréstimo."));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel4.setText("Data do emprestimo:(dd/mm/aaaa)");

        jLabel5.setText("Data de Devolução: (dd/mm/aaaa)");

        jT3DataEmprestimo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jT3DataEmprestimoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Empréstimo de obra:");
        jLabel2.setToolTipText("Cadastro de Usuário");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 1, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(10, 10, 10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jT3DataEmprestimo, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(jT4DataDevolucao))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jConfirmaemprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(campocpf, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(campocpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jConfirmaemprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jT3DataEmprestimo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jT4DataDevolucao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          this.fechar();
    }                                      
    private void fechar(){
        if(javax.swing.JOptionPane.showConfirmDialog(null,"Deseja Fechar?","ATENÇÂO ",javax.swing.JOptionPane.YES_NO_OPTION )==0){
            this.dispose();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jT3DataEmprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jT3DataEmprestimoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jT3DataEmprestimoActionPerformed

    private void jConfirmaemprestimoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConfirmaemprestimoActionPerformed
        if(Valida())
        {
            try {
                if(Validacao())
                {
                    
                    DAOEmprestimo insereDados = new DAOEmprestimo();
                    int linha=tabelaDados.getSelectedRow();
                    if(insereDados.insereEmprestimo(campocpf.getText(),""+tabelaDados.getValueAt(linha, 6),""+tabelaDados.getValueAt(linha, 0),jT3DataEmprestimo.getText(),jT4DataDevolucao.getText()))
                    {
                        JOptionPane.showMessageDialog(null, "Registro cadastrado com sucesso!");
                        campocpf.setText("");
                        jT3DataEmprestimo.setText("");
                        jT4DataDevolucao.setText("");
                        Decresce();
                    }
                    else
                    {
                        JOptionPane.showMessageDialog(null, "Erro ao cadastrar registro, tente novamente.");
                        campocpf.setText("");
                        jT3DataEmprestimo.setText("");
                        jT4DataDevolucao.setText("");
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(GUIEmprestar.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jConfirmaemprestimoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIEmprestar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIEmprestar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIEmprestar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIEmprestar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new GUIEmprestar().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(GUIEmprestar.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField campocpf;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jConfirmaemprestimo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jT3DataEmprestimo;
    private javax.swing.JTextField jT4DataDevolucao;
    private javax.swing.JTable tabelaDados;
    // End of variables declaration//GEN-END:variables
}
